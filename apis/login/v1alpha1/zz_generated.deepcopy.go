//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Policy) DeepCopyInto(out *Policy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Policy.
func (in *Policy) DeepCopy() *Policy {
	if in == nil {
		return nil
	}
	out := new(Policy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Policy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyInitParameters) DeepCopyInto(out *PolicyInitParameters) {
	*out = *in
	if in.AllowDomainDiscovery != nil {
		in, out := &in.AllowDomainDiscovery, &out.AllowDomainDiscovery
		*out = new(bool)
		**out = **in
	}
	if in.AllowExternalIdp != nil {
		in, out := &in.AllowExternalIdp, &out.AllowExternalIdp
		*out = new(bool)
		**out = **in
	}
	if in.AllowRegister != nil {
		in, out := &in.AllowRegister, &out.AllowRegister
		*out = new(bool)
		**out = **in
	}
	if in.DefaultRedirectURI != nil {
		in, out := &in.DefaultRedirectURI, &out.DefaultRedirectURI
		*out = new(string)
		**out = **in
	}
	if in.DisableLoginWithEmail != nil {
		in, out := &in.DisableLoginWithEmail, &out.DisableLoginWithEmail
		*out = new(bool)
		**out = **in
	}
	if in.DisableLoginWithPhone != nil {
		in, out := &in.DisableLoginWithPhone, &out.DisableLoginWithPhone
		*out = new(bool)
		**out = **in
	}
	if in.ExternalLoginCheckLifetime != nil {
		in, out := &in.ExternalLoginCheckLifetime, &out.ExternalLoginCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.ForceMfa != nil {
		in, out := &in.ForceMfa, &out.ForceMfa
		*out = new(bool)
		**out = **in
	}
	if in.ForceMfaLocalOnly != nil {
		in, out := &in.ForceMfaLocalOnly, &out.ForceMfaLocalOnly
		*out = new(bool)
		**out = **in
	}
	if in.HidePasswordReset != nil {
		in, out := &in.HidePasswordReset, &out.HidePasswordReset
		*out = new(bool)
		**out = **in
	}
	if in.Idps != nil {
		in, out := &in.Idps, &out.Idps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreUnknownUsernames != nil {
		in, out := &in.IgnoreUnknownUsernames, &out.IgnoreUnknownUsernames
		*out = new(bool)
		**out = **in
	}
	if in.MfaInitSkipLifetime != nil {
		in, out := &in.MfaInitSkipLifetime, &out.MfaInitSkipLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactorCheckLifetime != nil {
		in, out := &in.MultiFactorCheckLifetime, &out.MultiFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactors != nil {
		in, out := &in.MultiFactors, &out.MultiFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrgIDRef != nil {
		in, out := &in.OrgIDRef, &out.OrgIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrgIDSelector != nil {
		in, out := &in.OrgIDSelector, &out.OrgIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordCheckLifetime != nil {
		in, out := &in.PasswordCheckLifetime, &out.PasswordCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.PasswordlessType != nil {
		in, out := &in.PasswordlessType, &out.PasswordlessType
		*out = new(string)
		**out = **in
	}
	if in.SecondFactorCheckLifetime != nil {
		in, out := &in.SecondFactorCheckLifetime, &out.SecondFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.SecondFactors != nil {
		in, out := &in.SecondFactors, &out.SecondFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserLogin != nil {
		in, out := &in.UserLogin, &out.UserLogin
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyInitParameters.
func (in *PolicyInitParameters) DeepCopy() *PolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyList) DeepCopyInto(out *PolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Policy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyList.
func (in *PolicyList) DeepCopy() *PolicyList {
	if in == nil {
		return nil
	}
	out := new(PolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyObservation) DeepCopyInto(out *PolicyObservation) {
	*out = *in
	if in.AllowDomainDiscovery != nil {
		in, out := &in.AllowDomainDiscovery, &out.AllowDomainDiscovery
		*out = new(bool)
		**out = **in
	}
	if in.AllowExternalIdp != nil {
		in, out := &in.AllowExternalIdp, &out.AllowExternalIdp
		*out = new(bool)
		**out = **in
	}
	if in.AllowRegister != nil {
		in, out := &in.AllowRegister, &out.AllowRegister
		*out = new(bool)
		**out = **in
	}
	if in.DefaultRedirectURI != nil {
		in, out := &in.DefaultRedirectURI, &out.DefaultRedirectURI
		*out = new(string)
		**out = **in
	}
	if in.DisableLoginWithEmail != nil {
		in, out := &in.DisableLoginWithEmail, &out.DisableLoginWithEmail
		*out = new(bool)
		**out = **in
	}
	if in.DisableLoginWithPhone != nil {
		in, out := &in.DisableLoginWithPhone, &out.DisableLoginWithPhone
		*out = new(bool)
		**out = **in
	}
	if in.ExternalLoginCheckLifetime != nil {
		in, out := &in.ExternalLoginCheckLifetime, &out.ExternalLoginCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.ForceMfa != nil {
		in, out := &in.ForceMfa, &out.ForceMfa
		*out = new(bool)
		**out = **in
	}
	if in.ForceMfaLocalOnly != nil {
		in, out := &in.ForceMfaLocalOnly, &out.ForceMfaLocalOnly
		*out = new(bool)
		**out = **in
	}
	if in.HidePasswordReset != nil {
		in, out := &in.HidePasswordReset, &out.HidePasswordReset
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Idps != nil {
		in, out := &in.Idps, &out.Idps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreUnknownUsernames != nil {
		in, out := &in.IgnoreUnknownUsernames, &out.IgnoreUnknownUsernames
		*out = new(bool)
		**out = **in
	}
	if in.MfaInitSkipLifetime != nil {
		in, out := &in.MfaInitSkipLifetime, &out.MfaInitSkipLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactorCheckLifetime != nil {
		in, out := &in.MultiFactorCheckLifetime, &out.MultiFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactors != nil {
		in, out := &in.MultiFactors, &out.MultiFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.PasswordCheckLifetime != nil {
		in, out := &in.PasswordCheckLifetime, &out.PasswordCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.PasswordlessType != nil {
		in, out := &in.PasswordlessType, &out.PasswordlessType
		*out = new(string)
		**out = **in
	}
	if in.SecondFactorCheckLifetime != nil {
		in, out := &in.SecondFactorCheckLifetime, &out.SecondFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.SecondFactors != nil {
		in, out := &in.SecondFactors, &out.SecondFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserLogin != nil {
		in, out := &in.UserLogin, &out.UserLogin
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyObservation.
func (in *PolicyObservation) DeepCopy() *PolicyObservation {
	if in == nil {
		return nil
	}
	out := new(PolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyParameters) DeepCopyInto(out *PolicyParameters) {
	*out = *in
	if in.AllowDomainDiscovery != nil {
		in, out := &in.AllowDomainDiscovery, &out.AllowDomainDiscovery
		*out = new(bool)
		**out = **in
	}
	if in.AllowExternalIdp != nil {
		in, out := &in.AllowExternalIdp, &out.AllowExternalIdp
		*out = new(bool)
		**out = **in
	}
	if in.AllowRegister != nil {
		in, out := &in.AllowRegister, &out.AllowRegister
		*out = new(bool)
		**out = **in
	}
	if in.DefaultRedirectURI != nil {
		in, out := &in.DefaultRedirectURI, &out.DefaultRedirectURI
		*out = new(string)
		**out = **in
	}
	if in.DisableLoginWithEmail != nil {
		in, out := &in.DisableLoginWithEmail, &out.DisableLoginWithEmail
		*out = new(bool)
		**out = **in
	}
	if in.DisableLoginWithPhone != nil {
		in, out := &in.DisableLoginWithPhone, &out.DisableLoginWithPhone
		*out = new(bool)
		**out = **in
	}
	if in.ExternalLoginCheckLifetime != nil {
		in, out := &in.ExternalLoginCheckLifetime, &out.ExternalLoginCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.ForceMfa != nil {
		in, out := &in.ForceMfa, &out.ForceMfa
		*out = new(bool)
		**out = **in
	}
	if in.ForceMfaLocalOnly != nil {
		in, out := &in.ForceMfaLocalOnly, &out.ForceMfaLocalOnly
		*out = new(bool)
		**out = **in
	}
	if in.HidePasswordReset != nil {
		in, out := &in.HidePasswordReset, &out.HidePasswordReset
		*out = new(bool)
		**out = **in
	}
	if in.Idps != nil {
		in, out := &in.Idps, &out.Idps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.IgnoreUnknownUsernames != nil {
		in, out := &in.IgnoreUnknownUsernames, &out.IgnoreUnknownUsernames
		*out = new(bool)
		**out = **in
	}
	if in.MfaInitSkipLifetime != nil {
		in, out := &in.MfaInitSkipLifetime, &out.MfaInitSkipLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactorCheckLifetime != nil {
		in, out := &in.MultiFactorCheckLifetime, &out.MultiFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.MultiFactors != nil {
		in, out := &in.MultiFactors, &out.MultiFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.OrgIDRef != nil {
		in, out := &in.OrgIDRef, &out.OrgIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.OrgIDSelector != nil {
		in, out := &in.OrgIDSelector, &out.OrgIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PasswordCheckLifetime != nil {
		in, out := &in.PasswordCheckLifetime, &out.PasswordCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.PasswordlessType != nil {
		in, out := &in.PasswordlessType, &out.PasswordlessType
		*out = new(string)
		**out = **in
	}
	if in.SecondFactorCheckLifetime != nil {
		in, out := &in.SecondFactorCheckLifetime, &out.SecondFactorCheckLifetime
		*out = new(string)
		**out = **in
	}
	if in.SecondFactors != nil {
		in, out := &in.SecondFactors, &out.SecondFactors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserLogin != nil {
		in, out := &in.UserLogin, &out.UserLogin
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyParameters.
func (in *PolicyParameters) DeepCopy() *PolicyParameters {
	if in == nil {
		return nil
	}
	out := new(PolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicySpec) DeepCopyInto(out *PolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicySpec.
func (in *PolicySpec) DeepCopy() *PolicySpec {
	if in == nil {
		return nil
	}
	out := new(PolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyStatus) DeepCopyInto(out *PolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyStatus.
func (in *PolicyStatus) DeepCopy() *PolicyStatus {
	if in == nil {
		return nil
	}
	out := new(PolicyStatus)
	in.DeepCopyInto(out)
	return out
}
