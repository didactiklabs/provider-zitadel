//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithub) DeepCopyInto(out *InstanceGithub) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithub.
func (in *InstanceGithub) DeepCopy() *InstanceGithub {
	if in == nil {
		return nil
	}
	out := new(InstanceGithub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceGithub) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubInitParameters) DeepCopyInto(out *InstanceGithubInitParameters) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubInitParameters.
func (in *InstanceGithubInitParameters) DeepCopy() *InstanceGithubInitParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubList) DeepCopyInto(out *InstanceGithubList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]InstanceGithub, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubList.
func (in *InstanceGithubList) DeepCopy() *InstanceGithubList {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstanceGithubList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubObservation) DeepCopyInto(out *InstanceGithubObservation) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubObservation.
func (in *InstanceGithubObservation) DeepCopy() *InstanceGithubObservation {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubParameters) DeepCopyInto(out *InstanceGithubParameters) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubParameters.
func (in *InstanceGithubParameters) DeepCopy() *InstanceGithubParameters {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubSpec) DeepCopyInto(out *InstanceGithubSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubSpec.
func (in *InstanceGithubSpec) DeepCopy() *InstanceGithubSpec {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstanceGithubStatus) DeepCopyInto(out *InstanceGithubStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstanceGithubStatus.
func (in *InstanceGithubStatus) DeepCopy() *InstanceGithubStatus {
	if in == nil {
		return nil
	}
	out := new(InstanceGithubStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithub) DeepCopyInto(out *OrgGithub) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithub.
func (in *OrgGithub) DeepCopy() *OrgGithub {
	if in == nil {
		return nil
	}
	out := new(OrgGithub)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OrgGithub) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubInitParameters) DeepCopyInto(out *OrgGithubInitParameters) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubInitParameters.
func (in *OrgGithubInitParameters) DeepCopy() *OrgGithubInitParameters {
	if in == nil {
		return nil
	}
	out := new(OrgGithubInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubList) DeepCopyInto(out *OrgGithubList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OrgGithub, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubList.
func (in *OrgGithubList) DeepCopy() *OrgGithubList {
	if in == nil {
		return nil
	}
	out := new(OrgGithubList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OrgGithubList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubObservation) DeepCopyInto(out *OrgGithubObservation) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubObservation.
func (in *OrgGithubObservation) DeepCopy() *OrgGithubObservation {
	if in == nil {
		return nil
	}
	out := new(OrgGithubObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubParameters) DeepCopyInto(out *OrgGithubParameters) {
	*out = *in
	if in.AutoLinking != nil {
		in, out := &in.AutoLinking, &out.AutoLinking
		*out = new(string)
		**out = **in
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		*out = new(string)
		**out = **in
	}
	out.ClientSecretSecretRef = in.ClientSecretSecretRef
	if in.IsAutoCreation != nil {
		in, out := &in.IsAutoCreation, &out.IsAutoCreation
		*out = new(bool)
		**out = **in
	}
	if in.IsAutoUpdate != nil {
		in, out := &in.IsAutoUpdate, &out.IsAutoUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IsCreationAllowed != nil {
		in, out := &in.IsCreationAllowed, &out.IsCreationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.IsLinkingAllowed != nil {
		in, out := &in.IsLinkingAllowed, &out.IsLinkingAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.OrgID != nil {
		in, out := &in.OrgID, &out.OrgID
		*out = new(string)
		**out = **in
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubParameters.
func (in *OrgGithubParameters) DeepCopy() *OrgGithubParameters {
	if in == nil {
		return nil
	}
	out := new(OrgGithubParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubSpec) DeepCopyInto(out *OrgGithubSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubSpec.
func (in *OrgGithubSpec) DeepCopy() *OrgGithubSpec {
	if in == nil {
		return nil
	}
	out := new(OrgGithubSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgGithubStatus) DeepCopyInto(out *OrgGithubStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgGithubStatus.
func (in *OrgGithubStatus) DeepCopy() *OrgGithubStatus {
	if in == nil {
		return nil
	}
	out := new(OrgGithubStatus)
	in.DeepCopyInto(out)
	return out
}
